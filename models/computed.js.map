{"version":3,"sources":["models/computed.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAsC;AAEtC;IAAsC,oCAAQ;IAA9C;;IAuCA,CAAC;IApCA,sBAAI,wCAAU;aAAd;YACC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QACzB,CAAC;aAED,UAAe,UAAU;YACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC/B,CAAC;;;OAJA;IAMO,wCAAa,GAArB;QACC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACzD,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,IAAI;YAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACd,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvB,WAAW,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YAC5D,WAAW,IAAI,KAAK,CAAC;QACtB,CAAC;QACD,WAAW,IAAI,sBAAsB,GAAG,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACjE,WAAW,IAAI,SAAS,CAAC;QACzB,MAAM,CAAC,WAAW,CAAC;IACpB,CAAC;IAED,mCAAQ,GAAR;QACC,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;QAChI,IAAI,OAAO,GAAG,OAAO,CAAC;QACtB,OAAO,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACnC,OAAO,IAAI,IAAI,CAAC;QAChB,OAAO,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IACF,uBAAC;AAAD,CAvCA,AAuCC,CAvCqC,mBAAQ,GAuC7C;AAvCY,4CAAgB","file":"computed.js","sourcesContent":["import { Property } from './property';\n\nexport class ComputedProperty extends Property {\n\tprivate _methodName: any;\n\n\tget methodName() {\n\t\treturn this._methodName;\n\t}\n\n\tset methodName(methodName) {\n\t\tthis._methodName = methodName;\n\t}\n\t// TODO: Need to implement this so it adds the computed: methodName\n\tprivate _getNewParams(): string {\n\t\tlet partsArr = this.params ? this.params.split(',') : [];\n\t\tlet hasType = partsArr.find((part) => {\n\t\t\treturn part.indexOf('type:') > -1;\n\t\t});\n\t\tif (!hasType) {\n\t\t\tpartsArr.unshift('type: Object');\n\t\t}\n\t\tlet newParamStr = '{\\n';\n\t\tfor (let i = 0; i < partsArr.length; i++) {\n\t\t\tlet part = partsArr[i];\n\t\t\tnewParamStr += '\\t\\t\\t\\t' + part.replace(/[/{/}\\n\\t]/g, '');\n\t\t\tnewParamStr += ',\\n';\n\t\t}\n\t\tnewParamStr += '\\t\\t\\t\\tcomputed: \\'' + this.methodName + '\\'\\n';\n\t\tnewParamStr += '\\t\\t\\t}';\n\t\treturn newParamStr;\n\t}\n\n\ttoMarkup() {\n\t\tlet nameParts = this.name.split(':');\n\t\tlet comment = this.comment && this.comment.commentText ? '\\n' + this.comment.toMarkup() : '\\n' + this.derivedComment.toMarkup();\n\t\tlet propStr = comment;\n\t\tpropStr += '\\t\\t\\t' + nameParts[0];\n\t\tpropStr += ': ';\n\t\tpropStr += this._getNewParams();\n\t\treturn propStr;\n\t}\n}"]}
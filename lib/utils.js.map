{"version":3,"sources":["lib/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import * as ts from 'typescript';\nimport * as path from 'path';\nimport * as Utils from '../lib/utils';\nimport { Component } from '../models/component';\nimport { Comment } from '../models/comment';\nimport { Listener } from '../models/listener';\nimport { Function } from '../models/function';\nimport { ProgramType } from '../models/comment';\nimport { Observer } from '../models/observer';\nimport { ComputedProperty } from '../models/computed';\n/**\n * An empty class for the PathInfo object. Used mainly for property\n * checking and typeahead\n * @export\n * @class PathInfo\n */\nexport class PathInfo {\n\tfileName: string;\n\tdirName: string;\n\tdocFileName: string;\n\tfullDocFilePath: string;\n\thtmlFileName: string;\n\tfullHtmlFilePath: string;\n}\n/**\n * Trim all whitespace to the right of a string\n * @export\n * @param {any} str\n * @returns {string}\n */\nexport function trimRight(str): string {\n\treturn str.replace(/\\s+$/, '');\n}\n/**\n * Trim all tabs from a string\n * @export\n * @param {any} str\n * @returns {string}\n */\nexport function trimTabs(str): string {\n\treturn str.replace(/\\t+/g, '');\n}\n/**\n * Trim all whitespace from a string\n * @export\n * @param {any} str\n * @returns {string}\n */\nexport function trimAllWhitespace(str): string {\n\treturn str.replace(/\\s*/g, '');\n}\n/**\n * Build a string from an object literal node\n * @export\n * @param {ts.ObjectLiteralExpression} objExp\n * @returns {any}\n */\nexport function getObjectLiteralString(objExp: ts.ObjectLiteralExpression): any {\n\tlet objLiteralObj:any = {};\n\tif (objExp && objExp.properties && objExp.properties.length > 0) {\n\t\tlet paramStr = '{\\n';\n\t\tfor (let i = 0; i < objExp.properties.length; i++) {\n\t\t\tlet propProperty: ts.PropertyAssignment = (<ts.PropertyAssignment>objExp.properties[i]);\n\t\t\tlet propPropertyKey = propProperty.name.getText();\n\t\t\tparamStr += '\\t' + propProperty.name.getText();\n\t\t\tparamStr += ': ';\n\t\t\tparamStr += propProperty.initializer.getText();\n\t\t\tparamStr += (i + 1) < objExp.properties.length ? ',' : '';\n\t\t\tparamStr += '\\n';\n\t\t\tif (propPropertyKey === 'type') {\n\t\t\t\tobjLiteralObj.type = propProperty.initializer.getText();\n\t\t\t}\n\t\t}\n\t\tparamStr += '}';\n\t\tobjLiteralObj.str = paramStr;\n\t}\n\treturn objLiteralObj;\n}\n/**\n * Build a String from an Object\n * @export\n * @param {*} obj\n * @returns {string}\n */\nexport function getStringFromObject(obj: any): string {\n\tlet objStr = null;\n\tif (obj) {\n\t\tlet objLength = Object.keys(obj).length;\n\t\tobjStr = '{\\n';\n\t\tlet idx = 0;\n\t\tfor (let key in obj) {\n\t\t\tlet objVal = '\\'' + obj[key] + '\\'';\n\t\t\tif (typeof (obj[key]) === 'boolean') {\n\t\t\t\tobjVal = obj[key];\n\t\t\t}\n\t\t\tobjStr += '\\t' + key + ': ' + objVal;\n\t\t\tobjStr += (idx + 1) < objLength ? ',\\n' : '\\n';\n\t\t\tidx++;\n\t\t}\n\t\tobjStr += '}';\n\t}\n\treturn objStr;\n}\n/**\n * Get an object from a string formatted as an object\n * @export\n * @param {string} objectStr\n * @returns {any}\n */\nexport function getObjectFromString(objectStr: string): any {\n\tlet params = {};\n\tlet partsArr = objectStr ? objectStr.split(',') : [];\n\tfor (let i = 0; i < partsArr.length; i++) {\n\t\tlet part = partsArr[i];\n\t\tlet partStr = part.replace(/[/{/}\\n\\t]/g, '');\n\t\tpartStr = Utils.trimAllWhitespace(partStr);\n\t\tlet partArr: any[] = partStr.split(':');\n\t\tpartArr[1] = partArr[1] === 'true' ? true : partArr[1];\n\t\tpartArr[1] = partArr[1] === 'false' ? false : partArr[1];\n\t\tparams[partArr[0]] = partArr[1];\n\t}\n\treturn params;\n}\n/**\n * Produce an array from a string which is formatted as an array\n * @export\n * @param {string} arrayStr\n * @returns {any}\n */\nexport function getArrayFromString(arrayStr: string): any {\n\tlet arr = [];\n\tif (arrayStr) {\n\t\tlet partsArr = arrayStr.replace(/[\\[\\]]/g, '').split(',');\n\t\tfor (let i = 0; i < partsArr.length; i++) {\n\t\t\tlet part = partsArr[i];\n\t\t\tif (part) {\n\t\t\t\tlet partStr = part.replace(/[\\n\\t\\[\\]'\"]/g, '');\n\t\t\t\tpartStr = Utils.trimAllWhitespace(partStr);\n\t\t\t\tarr.push(partStr);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n/**\n * Get the pieces of the path for fileName\n * @param {string} fileName\n * @returns {any} pathInfo\n * @property {string} pathInfo.fileName - The original source file name\n * @property {string} pathInfo.dirName - The directory name for fileName\n * @property {string} pathInfo.docFileName - The generated documentation file name\n * @property {string} pathInfo.fullDocFilePath - The full path to pathInfo.docFileName\n */\nexport function getPathInfo(fileName: string, docPath: string): PathInfo {\n\tlet pathInfo: PathInfo = new PathInfo;\n\tif (fileName) {\n\t\tlet fileNameExt = path.extname(fileName);\n\t\tpathInfo.fileName = fileName;\n\t\tpathInfo.dirName = docPath;\n\t\tpathInfo.docFileName = 'doc_' + path.basename(fileName).replace(fileNameExt, '.html');\n\t\tpathInfo.fullDocFilePath = path.join(docPath, pathInfo.docFileName);\n\t\tpathInfo.htmlFileName = path.basename(fileName).replace(fileNameExt, '.html');\n\t\tpathInfo.fullHtmlFilePath = path.join(path.dirname(fileName), pathInfo.htmlFileName);\n\t}\n\treturn pathInfo;\n}\n/**\n * Get the starting line number for a node\n * @export\n * @param {ts.Node} node\n * @returns {number}\n */\nexport function getStartLineNumber(node: ts.Node): number {\n\tlet lineObj = ts.getLineAndCharacterOfPosition(node.getSourceFile(), node.getStart());\n\treturn lineObj.line + 1;\n}\n/**\n * Get the ending line number for a node\n * @export\n * @param {ts.Node} node\n * @returns {number}\n */\nexport function getEndLineNumber(node: ts.Node): number {\n\tlet lineObj = ts.getLineAndCharacterOfPosition(node.getSourceFile(), node.getEnd());\n\treturn lineObj.line + 1;\n}\n/**\n * Capitalize the first letter of a string\n * @export\n * @param {string} str\n * @returns {string}\n */\nexport function capitalizeFirstLetter(str: string): string {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Determine if a property is a child of the Component node\n * @export\n * @param {ts.Node} parentNode The property's parent node\n * @param {Component} component The component\n * @returns {boolean}\n */\nexport function isNodeComponentChild(parentNode: ts.Node, component: Component): boolean {\n\tlet isComponent = false;\n\tif (ts.isClassDeclaration(parentNode)) {\n\t\tlet classDecl = <ts.ClassDeclaration>parentNode;\n\t\tif (classDecl.name.getText() === component.className) {\n\t\t\tisComponent = true;\n\t\t}\n\t}\n\treturn isComponent;\n}\n/**\n * Create a method from the listener\n * @export\n * @param {Listener} listener\n * @returns {Function}\n */\nexport function getMethodFromListener(listener: Listener): Function {\n\tlet listenerMethod = null;\n\tif (listener) {\n\t\tif (listener.methodName) {\n\t\t\tlistenerMethod = new Function();\n\t\t\tlistenerMethod.methodName = listener.methodName;\n\t\t\tlistenerMethod.parameters = ['evt'];\n\t\t\tlistenerMethod.comment = listener.comment || new Comment();\n\t\t\tif (!listener.comment) {\n\t\t\t\tlistenerMethod.comment.commentText = '';\n\t\t\t}\n\t\t\tlistenerMethod.comment.isFor = ProgramType.Function;\n\t\t\tlet tags = listenerMethod.comment.tags || [];\n\t\t\tlet hasListensTag = tags.find((tag) => {\n\t\t\t\treturn tag.indexOf('@listens') > -1;\n\t\t\t});\n\t\t\tif (!hasListensTag) {\n\t\t\t\ttags.push('@listens #' + listener.eventDeclaration);\n\t\t\t}\n\t\t\tif (!listenerMethod.comment.tags || listenerMethod.comment.tags.length === 0) {\n\t\t\t\tlistenerMethod.comment.tags = tags;\n\t\t\t}\n\t\t\tlistener.comment = null;\n\t\t}\n\t\treturn listenerMethod;\n\t}\n}\n/**\n * Create a method from a computed property\n * @export\n * @param {ComputedProperty} computed\n * @returns {Function}\n */\nexport function getMethodFromComputed(computed: ComputedProperty): Function {\n\tlet computedMethod = null;\n\tif (computed) {\n\t\tif (computed.methodName) {\n\t\t\tcomputedMethod = new Function();\n\t\t\tcomputedMethod.methodName = computed.methodName;\n\t\t\tif (computed.comment) {\n\t\t\t\tcomputedMethod.comment = new Comment();\n\t\t\t\tcomputedMethod.comment.commentText = computed.comment.commentText;\n\t\t\t\tcomputedMethod.comment.endLineNumber = computed.comment.endLineNum;\n\t\t\t\tcomputedMethod.comment.startLineNumber = computed.comment.startLineNum;\n\t\t\t\tcomputedMethod.comment.tags = computed.comment.tags || [];\n\t\t\t\tcomputedMethod.comment.isFor = ProgramType.Function;\n\t\t\t}\n\t\t}\n\t}\n\treturn computedMethod;\n}\n/**\n * Create a method from an observer\n * @export\n * @param {Observer} observer\n * @returns {Function}\n */\nexport function getMethodFromObserver(observer: Observer): Function {\n\tlet observerMethod: Function = null;\n\tif (observer) {\n\t\tif (observer.methodName) {\n\t\t\tobserverMethod = new Function();\n\t\t\tobserverMethod.methodName = observer.methodName;\n\t\t\tif (observer.properties && observer.properties.length > 0) {\n\t\t\t\tlet paramArr = [];\n\t\t\t\tfor (let i = 0; i < observer.properties.length; i++) {\n\t\t\t\t\tlet prop = observer.properties[i];\n\t\t\t\t\tlet propVal = null;\n\t\t\t\t\tif (prop.indexOf('.') > -1) {\n\t\t\t\t\t\tpropVal = prop.split('.')[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpropVal = prop;\n\t\t\t\t\t}\n\t\t\t\t\tparamArr.push(propVal);\n\t\t\t\t}\n\t\t\t\tobserverMethod.parameters = paramArr;\n\t\t\t}\n\t\t\tobserverMethod.comment = observer.comment || new Comment();\n\t\t\tobserverMethod.comment.isFor = ProgramType.Function;\n\t\t\tif (!observer.comment) {\n\t\t\t\tobserverMethod.comment.commentText = '';\n\t\t\t}\n\t\t\tobserver.comment = null;\n\t\t}\n\t}\n\treturn observerMethod;\n}\n/**\n * Determine of the passed in node matches the pattern of a\n * computed property. Mainly, is the decorator have a name of 'computed'\n * and all the other relevant bits are present\n * @param {ts.MethodDeclaration} node\n * @returns {boolean}\n */\nexport function isComputedProperty(node: ts.MethodDeclaration): boolean {\n\tlet isComputed = false;\n\tif (node && node.decorators && node.decorators.length > 0) {\n\t\tnode.decorators.forEach((val: ts.Decorator, idx: number) => {\n\t\t\tlet exp = val.expression;\n\t\t\tlet expText = exp.getText();\n\t\t\tlet decoratorMatch = /\\s*(?:computed)\\s*\\((?:\\{*(.*)\\}*)\\)/.exec(expText);\n\t\t\tisComputed = decoratorMatch && decoratorMatch.length > 0 ? true : false;\n\t\t});\n\t}\n\treturn isComputed;\n}\n/**\n * Determine if the passed in node matches the pattern of a\n * listener. Mainly, does the decorator have a name of 'listen'\n * and all the other relevant bits are present\n * @param {ts.MethodDeclaration} node\n * @returns {boolean}\n */\nexport function isListener(node: ts.MethodDeclaration): boolean {\n\tlet isListener = false;\n\tif (node && node.decorators && node.decorators.length > 0) {\n\t\tnode.decorators.forEach((val: ts.Decorator, idx: number) => {\n\t\t\tlet exp = val.expression;\n\t\t\tlet expText = exp.getText();\n\t\t\tlet decoratorMatch = /\\s*(?:listen)\\s*\\((?:\\{*(.*)\\}*)\\)/.exec(expText);\n\t\t\tisListener = decoratorMatch && decoratorMatch.length > 0 ? true : false;\n\t\t});\n\t}\n\treturn isListener;\n}\n/**\n * Determine if the passed in node matches the pattern of a\n * observer. Mainly, does the decorator have a name of 'observe'\n * and all the other relevant bits are present\n * @param {ts.MethodDeclaration} node\n * @returns {boolean}\n */\nexport function isObserver(node: ts.MethodDeclaration): boolean {\n\tlet isObserver = false;\n\tif (node && node.decorators && node.decorators.length > 0) {\n\t\tnode.decorators.forEach((val: ts.Decorator, idx: number) => {\n\t\t\tlet exp = val.expression;\n\t\t\tlet expText = exp.getText();\n\t\t\tlet decoratorMatch = /\\s*(?:observe)\\s*\\((?:['\"]{1}(.*)['\"]{1})\\)/.exec(expText);\n\t\t\tisObserver = decoratorMatch && decoratorMatch.length > 0 ? true : false;\n\t\t});\n\t}\n\treturn isObserver;\n}\n"]}